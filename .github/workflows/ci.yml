name: CI  # Nom de la configuration du workflow

on:  # Déclencheurs d'événements
  push:  # Déclenche le workflow sur chaque push
    branches:
      - main  # Sur la branche 'main'
  pull_request:  # Déclenche le workflow sur chaque pull request
    branches:
      - main  # Sur la branche 'main'

jobs:  # Définition des tâches à exécuter dans le workflow
  build:  # Première tâche : Build
    runs-on: ubuntu-latest  # Utilise la dernière version d'Ubuntu

    services:  # Services nécessaires pour la tâche
      mysql:  # Service MySQL
        image: mysql:5.7  # Utilise l'image MySQL version 5.7
        env:  # Variables d'environnement pour MySQL
          MYSQL_ROOT_PASSWORD: root  # Mot de passe root pour MySQL
          MYSQL_DATABASE: symfony_test  # Nom de la base de données
        ports:
          - 3306:3306  # Mappe le port 3306 de l'hôte au port 3306 du conteneur
        options: >-  # Options pour la commande docker
          --health-cmd="mysqladmin ping --silent"  # Commande de vérification de l'état
          --health-interval=10s  # Intervalle de vérification de l'état
          --health-timeout=5s  # Timeout pour la vérification de l'état
          --health-retries=3  # Nombre de tentatives de vérification de l'état

    env:
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/symfony_test  # URL de connexion à la base de données

    steps:  # Étapes de la tâche de build
    - name: Checkout code  # Vérifie le code source
      uses: actions/checkout@v2  # Utilise l'action de checkout

    - name: Set up PHP 8.2  # Configure PHP 8.2
      uses: shivammathur/setup-php@v2  # Utilise l'action pour configurer PHP
      with:
        php-version: '8.2'  # Version de PHP
        extensions: mbstring, intl, pdo_mysql  # Extensions PHP nécessaires
        tools: composer  # Outils PHP nécessaires

    - name: Install Composer dependencies  # Installe les dépendances avec Composer
      run: rm composer.lock && composer install --prefer-dist --no-progress --no-suggest --no-interaction  # Commande d'installation

    - name: Create .env.test.local  # Crée le fichier .env.test.local
      run: |
        echo 'DATABASE_URL="mysql://root:root@127.0.0.1:3306/symfony_test"' > .env.test.local  # Commande pour créer le fichier

    - name: Run database migrations  # Exécute les migrations de base de données
      run: php bin/console  # Commande pour exécuter les migrations

  analyze-static-code:  # Deuxième tâche : Analyse du code statique
    runs-on: ubuntu-latest  # Utilise la dernière version d'Ubuntu
    needs: build  # Dépend de la tâche de build

    steps:  # Étapes de la tâche d'analyse de code statique
    - name: Checkout code  # Vérifie le code source
      uses: actions/checkout@v2  # Utilise l'action de checkout

    - name: Set up PHP 8.2 and tools for static analysis  # Configure PHP 8.2 et les outils d'analyse statique
      uses: shivammathur/setup-php@v2  # Utilise l'action pour configurer PHP
      with:
        php-version: '8.2'  # Version de PHP
        extensions: mbstring, intl, pdo_mysql  # Extensions PHP nécessaires
        tools: phpstan  # Outil d'analyse statique

    - name: Install dependencies  # Installe les dépendances avec Composer
      run: rm composer.lock && composer install --prefer-dist --no-progress --no-suggest --no-interaction  # Commande d'installation

    - name: Run static analysis  # Exécute l'analyse statique
      run: vendor/bin/phpstan analyse ./public/index.php  # Commande pour exécuter l'analyse statique

  run-unit-tests:  # Troisième tâche : Exécution des tests unitaires
    runs-on: ubuntu-latest  # Utilise la dernière version d'Ubuntu
    needs: build  # Dépend de la tâche de build

    steps:  # Étapes de la tâche de tests unitaires
    - name: Checkout code  # Vérifie le code source
      uses: actions/checkout@v2  # Utilise l'action de checkout

    - name: Set up PHP 8.2 and PHPUnit  # Configure PHP 8.2 et PHPUnit
      uses: shivammathur/setup-php@v2  # Utilise l'action pour configurer PHP
      with:
        php-version: '8.2'  # Version de PHP
        extensions: mbstring, intl, pdo_mysql  # Extensions PHP nécessaires
        tools: phpunit  # Outil de tests unitaires

    - name: Install dependencies  # Installe les dépendances avec Composer
      run: rm composer.lock && composer install --prefer-dist --no-progress --no-suggest --no-interaction  # Commande d'installation

    - name: Run unit tests  # Exécute les tests unitaires
      run: vendor/bin/phpunit  # Commande pour exécuter les tests unitaires

  security-scan:  # Quatrième tâche : Analyse de sécurité
    runs-on: ubuntu-latest  # Utilise la dernière version d'Ubuntu
    needs: build  # Dépend de la tâche de build

    steps:  # Étapes de la tâche d'analyse de sécurité
    - name: Checkout code  # Vérifie le code source
      uses: actions/checkout@v2  # Utilise l'action de checkout

    - name: Install Symfony CLI  # Installe l'outil en ligne de commande Symfony
      run: |
        curl -sS https://get.symfony.com/cli/installer | bash  # Télécharge et installe Symfony CLI
        sudo mv /home/runner/.symfony5/bin/symfony /usr/local/bin/symfony  # Déplace l'outil dans un répertoire accessible

    - name: Run security analysis  # Exécute l'analyse de sécurité
      run: symfony check:security  # Commande pour exécuter l'analyse de sécurité
